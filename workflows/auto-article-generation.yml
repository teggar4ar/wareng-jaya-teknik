name: Auto Article Generation

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  generate-article:
    runs-on: ubuntu-latest
    
    # Only run for issues with 'auto-article' label or manual trigger
    if: contains(github.event.issue.labels.*.name, 'auto-article') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: feat/automation-integration
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install @google/generative-ai

      - name: Get issue data
        id: issue-data
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ISSUE_NUMBER="${{ github.event.inputs.issue_number }}"
          else
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          # Get issue body
          ISSUE_BODY=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" | \
            jq -r '.body')
          
          # Save issue body to file for processing
          echo "$ISSUE_BODY" > issue_body.txt
          
          # Get issue title
          ISSUE_TITLE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER" | \
            jq -r '.title')
          
          echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT

      - name: Generate article
        id: generate
        run: |
          # Create a simple runner script
          cat > run_generator.js << 'EOF'
          import { generateArticleFromIssue } from './scripts/generate-article.js';
          import fs from 'fs';
          
          async function main() {
            try {
              const issueBody = fs.readFileSync('issue_body.txt', 'utf8');
              const apiKey = process.env.GEMINI_API_KEY;
              
              if (!apiKey) {
                throw new Error('GEMINI_API_KEY is not set');
              }
              
              console.log('Generating article...');
              const result = await generateArticleFromIssue(issueBody, apiKey);
              
              // Ensure content/blog directory exists
              if (!fs.existsSync('content/blog')) {
                fs.mkdirSync('content/blog', { recursive: true });
              }
              
              // Save the article
              const filePath = `content/blog/${result.filename}`;
              fs.writeFileSync(filePath, result.content, 'utf8');
              
              console.log(`Article generated: ${result.title}`);
              console.log(`File saved: ${filePath}`);
              
              // Output for GitHub Actions (using newer syntax)
              console.log(`filename=${result.filename}` >> process.env.GITHUB_OUTPUT);
              console.log(`title=${result.title}` >> process.env.GITHUB_OUTPUT);
              console.log(`filepath=${filePath}` >> process.env.GITHUB_OUTPUT);
              
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          }
          
          main();
          EOF
          
          # Run the generator
          node run_generator.js
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Regenerate blog data
        run: |
          node scripts/generate-blog-data.js

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add content/blog/${{ steps.generate.outputs.filename }}
          git add src/data/blogPosts.js
          
          git commit -m "ü§ñ Auto-generated article: ${{ steps.generate.outputs.title }}" || exit 0
          git push

      - name: Comment on issue
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.issue-data.outputs.issue_number }}/comments" \
            -d "{
              \"body\": \"‚úÖ **Article Generated Successfully!**\\n\\nüìù **Title:** ${{ steps.generate.outputs.title }}\\nüìÅ **File:** \`${{ steps.generate.outputs.filepath }}\`\\n\\nüîó **Preview:** The article will be available on the website after deployment.\\n\\n---\\n*This article was automatically generated using AI based on your requirements.*\"
            }"

      - name: Close issue
        run: |
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.issue-data.outputs.issue_number }}" \
            -d '{"state": "closed"}'

      - name: Handle errors
        if: failure()
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.issue-data.outputs.issue_number }}/comments" \
            -d '{
              "body": "‚ùå **Article Generation Failed**\\n\\nThere was an error generating the article. Please check the workflow logs for details.\\n\\n**Possible issues:**\\n- Invalid topic or requirements\\n- API quota exceeded\\n- Technical error\\n\\nPlease try again or contact the administrator."
            }'